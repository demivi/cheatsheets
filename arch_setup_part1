Make a bootable USB drive once you've downloaded an Arch iso:
sudo dd bs=4M if=archlinux-*.iso of=/dev/sdX status=progress oflag=sync

In the BIOS:
disable Secure boot, enable UEFI mode

This cheatsheet covers a French configuration example, change the relevant parts to fit your needs.

Once booted:
loadkeys fr-latin9
("ls /usr/share/kbd/keymaps/**/*.map.gz" to list available layouts)
(tip: you can first load "fr" if you don't know where "-" is in qwerty, then "fr-latin9")

Verify your boot mode, if this directory exists, boot mode is UEFI:
ls /sys/firmware/efi/

Make sure you have Internet access.
I advise you to use tmux so you can have this file next to your command prompt
and can copy and paste blocks of commands (delimited below by ```).

Clone the repo:
reflector
pacman -Syy git
git clone https://github/com/demivi/cheatsheet

Or download this file directly:
curl https://raw.githubusercontent.com/demivi/cheatsheets/master/arch_setup_part1 -o setup_p1

Find out your device names (add "-f" to get UUIDs):
lsblk

Change relevant parts of this file beforehand if you want to copy and paste:
- size and number of LVM groups
- name of devices (here main device is /dev/nvme0n1)
- name of partitions (here /dev/nvme0n1p1 for /boot and /dev/nvme0n1p2 for /)
- country in curl command to get the mirrorlist
- timezone region and city ("ls /usr/share/zoneinfo/" for a list of available ones)
- locale settings (available ones in "/etc/locale.gen")
- keymap settings (same as the loadkeys command before)
- hostname
- username

In case you don't know tmux or aren't familiar with the default bindings, do the following:
- tmux -> start tmux
- Ctrl-b % -> split screen into 2 panes
- cat this file
- ctrl-b [ -> copy mode (you can move around with the arrow keys/vim controls, ctrl-u / ctrl-d)
- ctrl-b o -> switch back to prompt pane

If you had any existing partitions, make sure your disklabel type is GPT:
fdisk -l /dev/nvme0n1
(look for the "Disklabel type:" line, if you can't find it you're fine)

If your disklabel is MBR or BSD, you can use this command to convert it to GPT:
sgdisk -g /dev/nvme0n1

Start the cfdisk utility:
cfdisk /dev/nvme0n1

Delete everything and create the following partitions
Boot partition: New -> 256M -> Type -> EFI System
Main partition: New -> the rest -> Type -> Linux filesystem
Write then exit

Setup a LUKS container:
cryptsetup luksFormat --type luks2 /dev/nvme0n1p2
cryptsetup open /dev/nvme0n1p2 luks

Now you can start copying and pasting by:
- ctrl-b o switch back to this pane
- ctrl-b [ if not already in copy mode
- going to the line(s) you want to copy
- hitting Shift-v
- selecting the lines you want to copy
- hitting Enter
- Ctrl-b o to switch to prompt pane
- Ctrl-b ] to paste
- once every command is done, go back to the first step

Don't forget to read the output of the below commands carefully in case of errors.

```
boot_partition='nvme0n1p1'
pvcreate /dev/mapper/luks
vgcreate lvmgroup /dev/mapper/luks
lvcreate -L 8G lvmgroup -n swap
lvcreate -l 100%FREE lvmgroup -n root
mkfs.ext4 /dev/lvmgroup/root
mkswap /dev/lvmgroup/swap
mount /dev/lvmgroup/root /mnt
mkdir /mnt/boot
mkfs.fat -F32 /dev/"$boot_partition"
mount /dev/"$boot_partition" /mnt/boot
swapon /dev/lvmgroup/swap
curl -sL "https://archlinux.org/mirrorlist/?country=FR&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' > /etc/pacman.d/mirrorlist
pacman -Syy
pacstrap /mnt base base-devel linux linux-firmware lvm2 mkinitcpio polkit vi man-db
genfstab -U /mnt >> /mnt/etc/fstab
arch-chroot /mnt
```

```
encrypted_partition='nvme0n1p2'
machine_name='myhostname'
systemctl enable systemd-networkd
systemctl enable systemd-resolved
ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
hwclock --systohc
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
locale-gen
echo 'LANG=en_US.UTF-8' > /etc/locale.conf
echo 'KEYMAP=fr-latin9' > /etc/vconsole.conf
echo "$machine_name" > /etc/hostname
echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $machine_name" > /etc/hosts
sed -i 's/^HOOKS.*/HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)/' /etc/mkinitcpio.conf
mkinitcpio -p linux
bootctl --path=/boot install
cd /boot/loader
echo -e 'default arch.conf\ntimeout 3' > loader.conf
UUID=$(blkid -s UUID -o value /dev/"$encrypted_partition")
echo "title Arch Linux
linux /vmlinuz-linux
initrd /initramfs-linux.img
options cryptdevice=UUID=$UUID:lvmvg root=/dev/lvmgroup/root quiet loglevel=3 vga=current rw" > entries/arch.conf
echo "title Arch Linux fallback
linux /vmlinuz-linux
initrd /initramfs-linux-fallback.img
options cryptdevice=UUID=$UUID:lvmvg root=/dev/lvmgroup/root quiet rw" > entries/fallback.conf
mkdir /etc/pacman.d/hooks/
echo "[Trigger]
Type = Package
Operation = Upgrade
Target = systemd

[Action]
Description = Updating systemd-boot
When = PostTransaction
Exec = /usr/bin/bootctl update" > /etc/pacman.d/hooks/100-systemd-boot.hook
```

Setup accounts:
passwd
useradd -m -G wheel username
passwd username
vi /etc/sudoers -> uncomment the "%wheel ALL=(ALL) ALL" line

exit
umount -R /mnt
poweroff

Here are a few things you might want to install now:
- a terminal emulator (urxvt, alacritty...)
- tmux
- xorg-server and xorg-xinit
- a windows manager
- graphics drivers if using an nvidia card
- alsa-utils, pulseaudio, pulseaudio-alsa, pavucontrol for audio
- a browser
- keepassxc
